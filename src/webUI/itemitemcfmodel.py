# -*- coding: utf-8 -*-
"""ItemItemCFModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4ORtlhl0B1I9xkOzfTW5rIqwcnZCkxQ
"""

import os
import numpy as np
import pandas as pd

class item2itemcfModel:

    def load_similarities(self, dataset_name, k=20):
        print("Loading Similarities from file")
        base_dir = 'static'
        save_dir = os.path.join(base_dir, dataset_name)
        similiraties_file = os.path.join(save_dir, 'similarities.npy')
        neighbors_file = os.path.join(save_dir, 'neighbors.npy')
        similarities = np.load(similiraties_file)
        neighbors = np.load(neighbors_file)
        return similarities[:,:k], neighbors[:,:k]


    def load_item_to_index(self, dataset_name):
        print("Loading item to index from file")
        base_dir = 'static'
        save_dir = os.path.join(base_dir, dataset_name)
        item_to_index_file = os.path.join(save_dir, 'item_to_index.txt')
        item_to_index = {}
        with open(item_to_index_file, 'r') as f:
            for line in f:
                 (key, val) = line.split(':')
                 item_to_index[key] = int(val)

        return item_to_index

    def load_unique_users(self, dataset_name):
        print("Loading unique users from file")
        base_dir = 'static'
        save_dir = os.path.join(base_dir, dataset_name)
        unique_users_file = os.path.join(save_dir, 'unique_user_ids.txt')
        unique_users = []
        with open(unique_users_file, 'r') as f:
            for line in f:
                unique_users.append(line.strip())
        return unique_users

    def load_ratings(self, dataset_name):
        base_dir = 'static'
        save_dir = os.path.join(base_dir, dataset_name)
        ratings_file = os.path.join(save_dir, 'input.csv')
        ratings = pd.read_csv(ratings_file)
        return ratings

    def __init__(self, dataset='ml-10k'):
        self.similarities, self.neighbors = self.load_similarities(dataset)
        self.item_to_index = self.load_item_to_index(dataset)
        self.userids = self.load_unique_users(dataset)
        self.df = self.load_ratings(dataset)
        self.np_ratings = self.df.to_numpy()
        print('init done')

    def get_userids(self):
        return self.userids

    def candidate_items(self, userid):
        """
        :param userid : user id for which we wish to find candidate items
        :return : I_u, candidates
        """
        # 1. Finding the set I_u of items already rated by user userid
        I_u = self.np_ratings[self.np_ratings[:, 0] == userid]
        I_u = I_u[:, 1]

        # 2. Taking the union of similar items for all items in I_u to form the set of candidate items
        c = set()
        for iid in I_u:
            #get index of iid
            title_index = self.item_to_index[iid]
            # add the neighbors of item iid in the set of candidate items
            c.update(self.neighbors[title_index])

        c = list(c)
        # 3. exclude from the set C all items in I_u.
        candidates = np.setdiff1d(c, I_u, assume_unique=True)

        return I_u, candidates

    def similarity_with_Iu(self, c, I_u):
        """
        compute similarity between an item c and a set of items I_u. For each item i in I_u, get similarity between
        i and c, if c exists in the set of items similar to itemid.
        :param c : itemid of a candidate item
        :param I_u : set of items already purchased by a given user
        :return w : similarity between c and I_u
        """
        w = 0
        for iid in I_u :
            # get similarity between itemid and c, if c is one of the k nearest neighbors of itemid
            title_index = self.item_to_index[iid]
            if c in self.neighbors[title_index] :
                w = w + self.similarities[title_index, self.neighbors[title_index] == c][0]
        return w


    def rank_candidates(self,candidates, I_u):
        """
        rank candidate items according to their similarities with i_u
        :param candidates : list of candidate items
        :param I_u : list of items purchased by the user
        :return ranked_candidates : dataframe of candidate items, ranked in descending order of similarities with I_u
        """

        # list of candidate items mapped to their corresponding similarities to I_u
        sims = [self.similarity_with_Iu(c, I_u) for c in candidates]
        mapping = list(zip(candidates, sims))

        ranked_candidates = sorted(mapping, key=lambda couple:couple[1], reverse=True)
        return ranked_candidates

    def topn_recommendation(self, userid, N=30):
        """
        Produce top-N recommendation for a given user
        :param userid : user for which we produce top-N recommendation
        :param n : length of the top-N recommendation list
        :return topn
        """
        # find candidate items
        I_u, candidates = self.candidate_items(userid)

        # rank candidate items according to their similarities with I_u
        ranked_candidates = self.rank_candidates(candidates, I_u)

        # get the first N row of ranked_candidates to build the top N recommendation list
        topn = pd.DataFrame(ranked_candidates[:N], columns=['itemid','similarity_with_Iu'])
        df_item_index1 = pd.DataFrame(list(self.item_to_index.items()), columns=['track_title', 'itemid'])
        topn = pd.merge(topn, df_item_index1, on='itemid', how='inner')
        return topn

item2item = item2itemcfModel()

uids = item2item.get_userids()
uids[0]

item2item.topn_recommendation(float(uids[0]))